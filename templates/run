#! /bin/python3
# coding: utf-8

from inginious import input
from inginious import feedback
from inginious import input
import subprocess
from inginious import rst
import re


# Will be filled by process.py
package = '{0}'
exercise = '{1}'
student_file = f'{{package}}/{{exercise}}.java'
test_file = f'{{package}}/{{exercise}}TestInginious.java'

input.parse_template(student_file)

compile_error = subprocess.call(f'javac -cp ".:libs/junit-4.12.jar:libs/hamcrest-core-1.3.jar:libs/JavaGrading.jar" RunTests.java {{test_file}} {{student_file}} 2>&1', shell=True, stdout=open('compiler.out', 'w'))

if compile_error != 0:
    codeblock = rst.get_codeblock("java", open('compiler.out').read())
    feedback.set_global_feedback("Votre code ne compile pas: \n\n" + codeblock, True)
    feedback.set_global_result("failed")
    exit(0)


try:
    out = subprocess.check_output('java -cp "libs/junit-4.12.jar:libs/hamcrest-core-1.3.jar:libs/JavaGrading.jar:." RunTests', shell=True).decode('utf8')
    out = out[out.index('--- GRADE ---'):]

    grade = re.findall(r"^TOTAL ([0-9\.]+)/([0-9\.]+)$", out, re.MULTILINE)[-1]
    grade = 100.0*float(grade[0])/float(grade[1])

    feedback.set_grade(grade)
    output = '\n'.join(out.split('\n')[1:-4])
    feedback.set_global_feedback("RÃ©sultat des tests: \n\n" + output, True)

    if grade < 99.99 :
        feedback.set_global_result("failed")
    else:
        feedback.set_global_result("success")
except Exception as e:
    feedback.set_global_feedback("Une erreur s'est produite!." + str(e), True)
    feedback.set_global_result("failed")
